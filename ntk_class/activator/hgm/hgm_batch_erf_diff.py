import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import scipy
import time
# import hgm_batch_erf
# import batch_data_loader
# import matplotlib.pyplot as plt
# import e_erf_diff_by_sum
# import tmp_erf_diff_fg
# import tmp_erf_diff_gf
# import tmp_erf_diff_gg


def f_erf_diff_fg(t,f):
    global Q
    global N_calls
    N_calls = N_calls+1
    k = int(np.floor(t))
    dx=Q[k+1]-Q[k]
    [x11,x12,x22]=Q[k]+dx*(t-k)
    #----- tmp_pf_erf_diff_fg.py
    d1=((x12)**(2))-((x22)*(x11))
    d2=(x12)**(2)+-((x22)*(x11))+x22
    d3=(x12)**(2)+((-(x22)+1) )*(x11)
    d4=(x12)**(2)+((-(x22)+1) )*(x11)+(x22)-(1)
    d5=(x12)**(4)+((-((x22)**(2))+x22) )*((x11)**(2))+((((x22)**(2))-(x22)) )*(x11)
    d6=(x22)-(1)
    d7=(x11)-(1)
    p11=np.array([[(-1)/(d7),(-((1/2)*(x12)))/(d7)],[((4)*((x12)**(3))+((((-(x22)+1) )*(x11)+(x22)-(1)) )*(x12))/(((d7)*(d4))*(d2)),((2)*((x12)**(4))+((((-((1/2)*(x22))+1/2) )*(x11)+((1/2)*(x22))-(1/2)) )*((x12)**(2))+((-((3/2)*((x22)**(2)))+(3/2)*(x22)) )*((x11)**(2))+((((3)*((x22)**(2)))-((3)*(x22))) )*(x11)+-((3/2)*((x22)**(2)))+(3/2)*(x22))/(((d7)*(d4))*(d2))]])
    p12=np.array([[0,1],[(-((8)*((x12)**(2)))+((((2)*(x22))-(2)) )*(x11)+-((2)*(x22))+2)/((d4)*(d2)),(-((7)*((x12)**(3)))+((((((7)*(x22))-(4)) )*(x11)+-((7)*(x22))+4) )*(x12))/((d4)*(d2))]])
    p22=np.array([[((x12)**(2)+((-((1/2)*(x22))+1/2) )*(x11)+((1/2)*(x22))-(1/2))/(((d7)*(d6))*(x22)),((1/2)*((x12)**(3))+((((-(x22)+1/2) )*(x11)+(x22)-(1/2)) )*(x12))/(((d7)*(d6))*(x22))],[(-((2)*((x12)**(5)))+((((((5)*(x22))-(3)) )*(x11)+-((5)*(x22))+3) )*((x12)**(3))+(((((x22)-(1)) )*((x11)**(2))+((-((2)*(x22))+2) )*(x11)+(x22)-(1)) )*(x12))/(((((d7)*(d6))*(d4))*(d2))*(x22)),(-((x12)**(6))+((((((4)*(x22))-(2)) )*(x11)+-((4)*(x22))+2) )*((x12)**(4))+(((((-((3/2)*((x22)**(2)))+(3/2)*(x22))-(1)) )*((x11)**(2))+((((3)*((x22)**(2)))-((3)*(x22))+2) )*(x11)+(-((3/2)*((x22)**(2)))+(3/2)*(x22))-(1)) )*((x12)**(2))+(((-((3/2)*((x22)**(3)))+(5/2)*((x22)**(2)))-(x22)) )*((x11)**(3))+((((9/2)*((x22)**(3)))-((15/2)*((x22)**(2)))+(3)*(x22)) )*((x11)**(2))+(((-((9/2)*((x22)**(3)))+(15/2)*((x22)**(2)))-((3)*(x22))) )*(x11)+((3/2)*((x22)**(3)))-((5/2)*((x22)**(2)))+x22)/(((((d7)*(d6))*(d4))*(d2))*(x22))]])

    #------
    p=p11*dx[0]+p12*dx[1]+p22*dx[2]
    return p@f

def f_erf_diff_gf(t,f):
    global Q
    global N_calls
    N_calls = N_calls+1
    k = int(np.floor(t))
    dx=Q[k+1]-Q[k]
    [x11,x12,x22]=Q[k]+dx*(t-k)
    #----
    x_tmp = x22
    x22 =x11
    x11 = x_tmp
    d1=((x12)**(2))-((x22)*(x11))
    d2=(x12)**(2)+-((x22)*(x11))+x22
    d3=(x12)**(2)+((-(x22)+1) )*(x11)
    d4=(x12)**(2)+((-(x22)+1) )*(x11)+(x22)-(1)
    d5=(x12)**(4)+((-((x22)**(2))+x22) )*((x11)**(2))+((((x22)**(2))-(x22)) )*(x11)
    d6=(x22)-(1)
    d7=(x11)-(1)
    p11=np.array([[(-1)/(d7),(-((1/2)*(x12)))/(d7)],[((4)*((x12)**(3))+((((-(x22)+1) )*(x11)+(x22)-(1)) )*(x12))/(((d7)*(d4))*(d2)),((2)*((x12)**(4))+((((-((1/2)*(x22))+1/2) )*(x11)+((1/2)*(x22))-(1/2)) )*((x12)**(2))+((-((3/2)*((x22)**(2)))+(3/2)*(x22)) )*((x11)**(2))+((((3)*((x22)**(2)))-((3)*(x22))) )*(x11)+-((3/2)*((x22)**(2)))+(3/2)*(x22))/(((d7)*(d4))*(d2))]])
    p12=np.array([[0,1],[(-((8)*((x12)**(2)))+((((2)*(x22))-(2)) )*(x11)+-((2)*(x22))+2)/((d4)*(d2)),(-((7)*((x12)**(3)))+((((((7)*(x22))-(4)) )*(x11)+-((7)*(x22))+4) )*(x12))/((d4)*(d2))]])
    p22=np.array([[((x12)**(2)+((-((1/2)*(x22))+1/2) )*(x11)+((1/2)*(x22))-(1/2))/(((d7)*(d6))*(x22)),((1/2)*((x12)**(3))+((((-(x22)+1/2) )*(x11)+(x22)-(1/2)) )*(x12))/(((d7)*(d6))*(x22))],[(-((2)*((x12)**(5)))+((((((5)*(x22))-(3)) )*(x11)+-((5)*(x22))+3) )*((x12)**(3))+(((((x22)-(1)) )*((x11)**(2))+((-((2)*(x22))+2) )*(x11)+(x22)-(1)) )*(x12))/(((((d7)*(d6))*(d4))*(d2))*(x22)),(-((x12)**(6))+((((((4)*(x22))-(2)) )*(x11)+-((4)*(x22))+2) )*((x12)**(4))+(((((-((3/2)*((x22)**(2)))+(3/2)*(x22))-(1)) )*((x11)**(2))+((((3)*((x22)**(2)))-((3)*(x22))+2) )*(x11)+(-((3/2)*((x22)**(2)))+(3/2)*(x22))-(1)) )*((x12)**(2))+(((-((3/2)*((x22)**(3)))+(5/2)*((x22)**(2)))-(x22)) )*((x11)**(3))+((((9/2)*((x22)**(3)))-((15/2)*((x22)**(2)))+(3)*(x22)) )*((x11)**(2))+(((-((9/2)*((x22)**(3)))+(15/2)*((x22)**(2)))-((3)*(x22))) )*(x11)+((3/2)*((x22)**(3)))-((5/2)*((x22)**(2)))+x22)/(((((d7)*(d6))*(d4))*(d2))*(x22))]])
    #---- 
    p=p11*dx[2]+p12*dx[1]+p22*dx[0] # dxを入れ替えた
    return p@f

def f_erf_diff_gg(t,f):
    global Q
    global N_calls
    N_calls = N_calls+1
    k = int(np.floor(t))
    dx=Q[k+1]-Q[k]
    [x11,x12,x22]=Q[k]+dx*(t-k)
    #----
    d1=((x12)**(2))-((x22)*(x11))
    d2=(x12)**(2)+-((x22)*(x11))+x22
    d3=(x12)**(2)+((-(x22)+1) )*(x11)
    d4=(x12)**(2)+((-(x22)+1) )*(x11)+(x22)-(1)
    d5=(x12)**(4)+((-((x22)**(2))+x22) )*((x11)**(2))+((((x22)**(2))-(x22)) )*(x11)
    d6=(x22)-(1)
    d7=(x11)-(1)
    p11=np.array([[(-(((1/2)*(d6))*(d2)))/(d5),(((-(x22)+1/2) )*((x12)**(3))+((((((x22)**(2))-(x22)) )*(x11)+-((1/2)*((x22)**(2)))+(1/2)*(x22)) )*(x12))/(d5)],[(((((3)*(x22))-(2)) )*((x12)**(9))+(((((-((9)*((x22)**(2)))+(23/2)*(x22))-(5/2)) )*(x11)+((6)*((x22)**(2)))-((15/2)*(x22))+3/2) )*((x12)**(7))+(((((((9)*((x22)**(3)))-((17)*((x22)**(2)))+(17/2)*(x22))-(1/2)) )*((x11)**(2))+(((-((25/2)*((x22)**(3)))+(45/2)*((x22)**(2)))-((21/2)*(x22))+1/2) )*(x11)+((9/2)*((x22)**(3)))-((15/2)*((x22)**(2)))+(3)*(x22)) )*((x12)**(5))+(((((-((3)*((x22)**(4)))+(15/2)*((x22)**(3)))-((6)*((x22)**(2)))+(3/2)*(x22)) )*((x11)**(3))+(((((7)*((x22)**(4)))-((33/2)*((x22)**(3)))+(12)*((x22)**(2)))-((5/2)*(x22))) )*((x11)**(2))+(((-((11/2)*((x22)**(4)))+(12)*((x22)**(3)))-((15/2)*((x22)**(2)))+x22) )*(x11)+((3/2)*((x22)**(4)))-((3)*((x22)**(3)))+(3/2)*((x22)**(2))) )*((x12)**(3))+(((((-((1/2)*((x22)**(5)))+(3/2)*((x22)**(4)))-((3/2)*((x22)**(3)))+(1/2)*((x22)**(2))) )*((x11)**(3))+(((((x22)**(5))-((3)*((x22)**(4)))+(3)*((x22)**(3)))-((x22)**(2))) )*((x11)**(2))+(((-((1/2)*((x22)**(5)))+(3/2)*((x22)**(4)))-((3/2)*((x22)**(3)))+(1/2)*((x22)**(2))) )*(x11)) )*(x12))/(((((d5)*(d4))*(d3))*(d2))*(d1)),(((((9/2)*(x22))-(2)) )*((x12)**(10))+(((((-((33/2)*((x22)**(2)))+(33/2)*(x22))-(5/2)) )*(x11)+((9)*((x22)**(2)))-((9)*(x22))+3/2) )*((x12)**(8))+(((((((21)*((x22)**(3)))-((33)*((x22)**(2)))+(25/2)*(x22))-(1/2)) )*((x11)**(2))+(((-((23)*((x22)**(3)))+(36)*((x22)**(2)))-((27/2)*(x22))+1/2) )*(x11)+((6)*((x22)**(3)))-((9)*((x22)**(2)))+(3)*(x22)) )*((x12)**(6))+(((((-((9)*((x22)**(4)))+(20)*((x22)**(3)))-((13)*((x22)**(2)))+(2)*(x22)) )*((x11)**(3))+(((((15)*((x22)**(4)))-((33)*((x22)**(3)))+(21)*((x22)**(2)))-((3)*(x22))) )*((x11)**(2))+(((-((17/2)*((x22)**(4)))+(18)*((x22)**(3)))-((21/2)*((x22)**(2)))+x22) )*(x11)+((3/2)*((x22)**(4)))-((3)*((x22)**(3)))+(3/2)*((x22)**(2))) )*((x12)**(4))+(((((-((3/2)*((x22)**(5)))+(3)*((x22)**(4)))-((3/2)*((x22)**(3)))) )*((x11)**(4))+((((3)*((x22)**(5)))-((6)*((x22)**(4)))+(3)*((x22)**(3))) )*((x11)**(3))+(((-((x22)**(5))+(3/2)*((x22)**(4)))-((1/2)*((x22)**(2)))) )*((x11)**(2))+(((-((1/2)*((x22)**(5)))+(3/2)*((x22)**(4)))-((3/2)*((x22)**(3)))+(1/2)*((x22)**(2))) )*(x11)) )*((x12)**(2))+(((((3/2)*((x22)**(6)))-((9/2)*((x22)**(5)))+(9/2)*((x22)**(4)))-((3/2)*((x22)**(3)))) )*((x11)**(5))+(((-((4)*((x22)**(6)))+(12)*((x22)**(5)))-((12)*((x22)**(4)))+(4)*((x22)**(3))) )*((x11)**(4))+(((((7/2)*((x22)**(6)))-((21/2)*((x22)**(5)))+(21/2)*((x22)**(4)))-((7/2)*((x22)**(3)))) )*((x11)**(3))+(((-((x22)**(6))+(3)*((x22)**(5)))-((3)*((x22)**(4)))+(x22)**(3)) )*((x11)**(2)))/(((((d5)*(d4))*(d3))*(d2))*(d1))]])
    p12=np.array([[0,1],[(-((2)*((x12)**(10)))+(((((x22)-(1)) )*(x11)+-(x22)+1) )*((x12)**(8))+((((((10)*((x22)**(2)))-((11)*(x22))+1) )*((x11)**(2))+(((-((11)*((x22)**(2)))+(12)*(x22))-(1)) )*(x11)+((x22)**(2))-(x22)) )*((x12)**(6))+(((((-((16)*((x22)**(3)))+(28)*((x22)**(2)))-((12)*(x22))) )*((x11)**(3))+((((28)*((x22)**(3)))-((48)*((x22)**(2)))+(20)*(x22)) )*((x11)**(2))+(((-((12)*((x22)**(3)))+(20)*((x22)**(2)))-((8)*(x22))) )*(x11)) )*((x12)**(4))+(((((((8)*((x22)**(4)))-((19)*((x22)**(3)))+(14)*((x22)**(2)))-((3)*(x22))) )*((x11)**(4))+(((-((19)*((x22)**(4)))+(44)*((x22)**(3)))-((31)*((x22)**(2)))+(6)*(x22)) )*((x11)**(3))+(((((14)*((x22)**(4)))-((31)*((x22)**(3)))+(20)*((x22)**(2)))-((3)*(x22))) )*((x11)**(2))+(((-((3)*((x22)**(4)))+(6)*((x22)**(3)))-((3)*((x22)**(2)))) )*(x11)) )*((x12)**(2))+(((-((x22)**(5))+(3)*((x22)**(4)))-((3)*((x22)**(3)))+(x22)**(2)) )*((x11)**(5))+(((((3)*((x22)**(5)))-((9)*((x22)**(4)))+(9)*((x22)**(3)))-((3)*((x22)**(2)))) )*((x11)**(4))+(((-((3)*((x22)**(5)))+(9)*((x22)**(4)))-((9)*((x22)**(3)))+(3)*((x22)**(2))) )*((x11)**(3))+(((((x22)**(5))-((3)*((x22)**(4)))+(3)*((x22)**(3)))-((x22)**(2))) )*((x11)**(2)))/(((((d5)*(d4))*(d3))*(d2))*(d1)),(-((4)*((x12)**(11)))+((((((8)*(x22))-(5)) )*(x11)+-((5)*(x22))+3) )*((x12)**(9))+(((((((8)*((x22)**(2)))-((6)*(x22)))-(1)) )*((x11)**(2))+((-((6)*((x22)**(2)))+(4)*(x22)+1) )*(x11)+-((x22)**(2))+x22) )*((x12)**(7))+(((((-((32)*((x22)**(3)))+(48)*((x22)**(2)))-((16)*(x22))) )*((x11)**(3))+((((48)*((x22)**(3)))-((72)*((x22)**(2)))+(24)*(x22)) )*((x11)**(2))+(((-((16)*((x22)**(3)))+(24)*((x22)**(2)))-((8)*(x22))) )*(x11)) )*((x12)**(5))+(((((((28)*((x22)**(4)))-((58)*((x22)**(3)))+(35)*((x22)**(2)))-((5)*(x22))) )*((x11)**(4))+(((-((58)*((x22)**(4)))+(120)*((x22)**(3)))-((72)*((x22)**(2)))+(10)*(x22)) )*((x11)**(3))+(((((35)*((x22)**(4)))-((72)*((x22)**(3)))+(42)*((x22)**(2)))-((5)*(x22))) )*((x11)**(2))+(((-((5)*((x22)**(4)))+(10)*((x22)**(3)))-((5)*((x22)**(2)))) )*(x11)) )*((x12)**(3))+(((((-((8)*((x22)**(5)))+(21)*((x22)**(4)))-((18)*((x22)**(3)))+(5)*((x22)**(2))) )*((x11)**(5))+(((((21)*((x22)**(5)))-((55)*((x22)**(4)))+(47)*((x22)**(3)))-((13)*((x22)**(2)))) )*((x11)**(4))+(((-((18)*((x22)**(5)))+(47)*((x22)**(4)))-((40)*((x22)**(3)))+(11)*((x22)**(2))) )*((x11)**(3))+(((((5)*((x22)**(5)))-((13)*((x22)**(4)))+(11)*((x22)**(3)))-((3)*((x22)**(2)))) )*((x11)**(2))) )*(x12))/(((((d5)*(d4))*(d3))*(d2))*(d1))]])
    p22=np.array([[(-(((1/2)*(d7))*(d3)))/(d5),(((-(x11)+1/2) )*((x12)**(3))+(((((x22)-(1/2)) )*((x11)**(2))+((-(x22)+1/2) )*(x11)) )*(x12))/(d5)],[(((((3)*(x11))-(2)) )*((x12)**(9))+((((-((9)*(x22))+6) )*((x11)**(2))+((((23/2)*(x22))-(15/2)) )*(x11)+-((5/2)*(x22))+3/2) )*((x12)**(7))+((((((9)*((x22)**(2)))-((25/2)*(x22))+9/2) )*((x11)**(3))+(((-((17)*((x22)**(2)))+(45/2)*(x22))-(15/2)) )*((x11)**(2))+((((17/2)*((x22)**(2)))-((21/2)*(x22))+3) )*(x11)+-((1/2)*((x22)**(2)))+(1/2)*(x22)) )*((x12)**(5))+(((((-((3)*((x22)**(3)))+(7)*((x22)**(2)))-((11/2)*(x22))+3/2) )*((x11)**(4))+(((((15/2)*((x22)**(3)))-((33/2)*((x22)**(2)))+(12)*(x22))-(3)) )*((x11)**(3))+(((-((6)*((x22)**(3)))+(12)*((x22)**(2)))-((15/2)*(x22))+3/2) )*((x11)**(2))+((((3/2)*((x22)**(3)))-((5/2)*((x22)**(2)))+x22) )*(x11)) )*((x12)**(3))+(((((-((1/2)*((x22)**(3)))+(x22)**(2))-((1/2)*(x22))) )*((x11)**(5))+((((3/2)*((x22)**(3)))-((3)*((x22)**(2)))+(3/2)*(x22)) )*((x11)**(4))+(((-((3/2)*((x22)**(3)))+(3)*((x22)**(2)))-((3/2)*(x22))) )*((x11)**(3))+((((1/2)*((x22)**(3)))-((x22)**(2))+(1/2)*(x22)) )*((x11)**(2))) )*(x12))/(((((d5)*(d4))*(d3))*(d2))*(d1)),(((((9/2)*(x11))-(2)) )*((x12)**(10))+((((-((33/2)*(x22))+9) )*((x11)**(2))+((((33/2)*(x22))-(9)) )*(x11)+-((5/2)*(x22))+3/2) )*((x12)**(8))+((((((21)*((x22)**(2)))-((23)*(x22))+6) )*((x11)**(3))+(((-((33)*((x22)**(2)))+(36)*(x22))-(9)) )*((x11)**(2))+((((25/2)*((x22)**(2)))-((27/2)*(x22))+3) )*(x11)+-((1/2)*((x22)**(2)))+(1/2)*(x22)) )*((x12)**(6))+(((((-((9)*((x22)**(3)))+(15)*((x22)**(2)))-((17/2)*(x22))+3/2) )*((x11)**(4))+(((((20)*((x22)**(3)))-((33)*((x22)**(2)))+(18)*(x22))-(3)) )*((x11)**(3))+(((-((13)*((x22)**(3)))+(21)*((x22)**(2)))-((21/2)*(x22))+3/2) )*((x11)**(2))+((((2)*((x22)**(3)))-((3)*((x22)**(2)))+x22) )*(x11)) )*((x12)**(4))+((((((-((3/2)*((x22)**(4)))+(3)*((x22)**(3)))-((x22)**(2)))-((1/2)*(x22))) )*((x11)**(5))+((((3)*((x22)**(4)))-((6)*((x22)**(3)))+(3/2)*((x22)**(2))+(3/2)*(x22)) )*((x11)**(4))+(((-((3/2)*((x22)**(4)))+(3)*((x22)**(3)))-((3/2)*(x22))) )*((x11)**(3))+((-((1/2)*((x22)**(2)))+(1/2)*(x22)) )*((x11)**(2))) )*((x12)**(2))+(((((3/2)*((x22)**(5)))-((4)*((x22)**(4)))+(7/2)*((x22)**(3)))-((x22)**(2))) )*((x11)**(6))+(((-((9/2)*((x22)**(5)))+(12)*((x22)**(4)))-((21/2)*((x22)**(3)))+(3)*((x22)**(2))) )*((x11)**(5))+(((((9/2)*((x22)**(5)))-((12)*((x22)**(4)))+(21/2)*((x22)**(3)))-((3)*((x22)**(2)))) )*((x11)**(4))+(((-((3/2)*((x22)**(5)))+(4)*((x22)**(4)))-((7/2)*((x22)**(3)))+(x22)**(2)) )*((x11)**(3)))/(((((d5)*(d4))*(d3))*(d2))*(d1))]])

    #---- 
    p=p11*dx[0]+p12*dx[1]+p22*dx[2]
    return p@f

def batch_hgm_erf_diff(dat,qsize = -1,rtol = 1e-10,atol = 1e-10):
    global Q
    global N_calls 
    global Last_value
    Q=dat
    if (qsize < 0): qsize=Q.shape[0]
    Q=Q[0:qsize]
    if (qsize <= 20):
        print(Q)
    print('Data size = ',Q.shape)
    NN = Q.shape[0]
    QQ=(Q.T)[0:-1] # remove index
    Q=QQ.T
    Q_orig=Q.copy()
    N_calls=0

    t_span=[0.0,NN-2]
    iv_fg=[0,1/2];
    iv_gf=[0,1/2];  # x を入れ替えるので iv は fg に同じ.
    iv_gg=[np.pi,1];

    sol_ff= []
    for i in range(NN-1):
        x = Q[i]
        tmp = 4*x[1]/(2*np.power((x[0]-1)*(x[2]-1) - x[1]**2,3/2))
        sol_ff = np.append(sol_ff,tmp)
    sol_ff = np.array(sol_ff)
    # print('sol_ff:')
    # print(sol_ff)
    if atol == 0:
        # print('sol_ff:')
        # print(sol_ff)
        sol_fg = scipy.integrate.solve_ivp(f_erf_diff_fg,t_span,iv_fg,method='RK45',t_eval=list(range(NN-1)),rtol=rtol)
        # print('sol_fg.y[0]')
        # print(sol_fg.y[0])

        sol_gf = scipy.integrate.solve_ivp(f_erf_diff_gf,t_span,iv_gf,method='RK45',t_eval=list(range(NN-1)),rtol=rtol)
        # print('sol_gf.y[0]')
        # print(sol_gf.y[0])
        sol_gg = scipy.integrate.solve_ivp(f_erf_diff_gg,t_span,iv_gg,method='RK45',t_eval=list(range(NN-1)),rtol=rtol)

    else:
        sol_fg = scipy.integrate.solve_ivp(f_erf_diff_fg,t_span,iv_fg,method='RK45',t_eval=list(range(NN-1)),rtol=rtol,atol = atol)
        # print('sol_fg.y[0]')
        # print(sol_fg.y[0])

        sol_gf = scipy.integrate.solve_ivp(f_erf_diff_gf,t_span,iv_gf,method='RK45',t_eval=list(range(NN-1)),rtol=rtol,atol = atol)
        # print('sol_gf.y[0]')
        # print(sol_gf.y[0])
        sol_gg = scipy.integrate.solve_ivp(f_erf_diff_gg,t_span,iv_gg,method='RK45',t_eval=list(range(NN-1)),rtol=rtol,atol = atol)
        # print(sol_fg.y[0].shape)
        # print('sol_gg.y[0]')
        # print(sol_gg.y[0])
    ee = (sol_ff+sol_fg.y[0])+(sol_gf.y[0])+(sol_gg.y[0])
    return ee.reshape(1,-1)

# num_pts = 15
# sample_x = np.linspace(-1,1,num_pts).reshape(num_pts, -1)
# beta = 0.5
# dat = []
# for i in range(num_pts):
#     for j in range(num_pts):
        
#         c1 = sample_x[i].item()**2 + beta**2
#         c2 = sample_x[j].item()**2 + beta**2
#         sigma = sample_x[i].item()*sample_x[j].item() + beta**2
#         covar = np.array([[c1,sigma],[sigma,c2]])
#         try:
#             mat_inv =(-1/2)* np.linalg.inv(covar)
#             print(mat_inv)

#         except np.linalg.LinAlgError as e:
#             print(e)
#             print('did not append inverse matrix')

#         else:
#             covar_inv =np.array([mat_inv[0][0],mat_inv[0][1],mat_inv[1][1]])
#             dat = np.append(dat,covar_inv)


# dat = dat.reshape(-1,3)
# print(dat)
# [dat2,removed,removed_small_covar]=batch_data_loader.cook_Q_for_hgm(dat,small_covar=1e-3,threshould=1e-5,initial_point = np.array([[-1.0,0.0,-1.0, -1]]),even = None)

# sol=batch_hgm_erf_diff(dat2,qsize=-1) 
# def nc2(x):
#     return (np.pi/np.sqrt(x[0]*x[2]-x[1]**2))


# import tmp_erf_diff_fg
# import tmp_erf_diff_gf
# import tmp_erf_diff_gg

# print(sol)
# sol2 = []
# for i in range(0,dat2.shape[0]-1):
#     x =np.array([dat2[i][0],dat2[i][1],dat2[i][2]])
#     t_span=[0.0,1.0]
#     iv_fg=[0,1/2];
#     iv_gf=[0,1/2];  # x を入れ替えるので iv は fg に同じ.
#     iv_gg=[np.pi,1];

    ##Ref: 2024-08-19-erf-diff-by-sum.rr
    #  sol_ff=(4/np.pi)*(np.pi*x[1])/(2*np.power((x[0]-1)*(x[2]-1) - x[1]**2,3/2))
#    sol_ff=4*x[1]/(2*np.power((x[0]-1)*(x[2]-1) - x[1]**2,3/2))
    #sol_fg = tmp_erf_diff_fg.solve_ivp(tmp_erf_diff_fg.f_erf_diff_fg,t_span,iv_fg,method='RK45',args=(x,),rtol=1e-10,atol=1e-10)
    #sol_gf = scipy.integrate.solve_ivp(tmp_erf_diff_gf.f_erf_diff_gf,t_span,iv_gf,method='RK45',args=(x,),rtol=1e-10,atol=1e-10)
    #sol_gg = tmp_erf_diff_gg.solve_ivp(tmp_erf_diff_gg.f_erf_diff_gg,t_span,iv_gg,method='RK45',args=(x,),rtol=1e-10,atol=1e-10)
    #print(sol_gg.y[0,-1])
#     tmp = e_erf_diff_by_sum.e_erf_diff_value_by_sum(x)
#     sol2 = np.append(sol2,tmp)

# print(sol2)
