# e_relu.py : modified the output of 2024-07-28-ReLU-pf.py
#Do pip3 install --upgrade --force-reinstall scipy on Ubuntu 20.04
import numpy as np
from scipy.integrate import solve_ivp
def nc2(x):
  return (np.pi/np.sqrt(x[0]*x[2]-x[1]**2))
# z: initial value, x: evaluation point
def f_ReLU(t,z,x):
  p11=x[0]; p12=x[1]; p22=x[2];
  d1=((((p22+1) )*(p11)+-((p12)**(2))+p22+1) )*((t)**(2))+((-(p11)+(-(p22))-(2)) )*(t)+1
  d2=((((p22+1) )*(p11)+(p12)**(2)+p22+1) )*((t)**(2))+((-(p11)+(-(p22))-(2)) )*(t)+1
  p=np.array([[0,p11+1,p12,p22+1,0],[((-((1/2)*(p11)))-(1/2))/((((p11)**(2)+(2)*(p11)+1) )*((t)**(2))+(((-((2)*(p11)))-(2)) )*(t)+1),(((((((-((5/2)*((p22)**(2))))-((5)*(p22)))-(5/2)) )*((p11)**(3))+((((-((15/2)*((p22)**(2))))-((15)*(p22)))-(15/2)) )*((p11)**(2))+(((5/2)*((p12)**(4))+((-((15/2)*((p22)**(2))))-((15)*(p22)))-(15/2)) )*(p11)+(5/2)*((p12)**(4))+((-((5/2)*((p22)**(2))))-((5)*(p22)))-(5/2)) )*((t)**(4))+(((((5)*(p22)+5) )*((p11)**(3))+(((5)*((p22)**(2))+(25)*(p22)+20) )*((p11)**(2))+(((10)*((p22)**(2))+(35)*(p22)+25) )*(p11)+-((2)*((p12)**(4)))+(5)*((p22)**(2))+(15)*(p22)+10) )*((t)**(3))+((-((5/2)*((p11)**(3)))+(((-((10)*(p22)))-(35/2)) )*((p11)**(2))+((((-((5/2)*((p22)**(2))))-((25)*(p22)))-(30)) )*(p11)+((-((5/2)*((p22)**(2))))-((15)*(p22)))-(15)) )*((t)**(2))+(((5)*((p11)**(2))+(((5)*(p22)+15) )*(p11)+(5)*(p22)+10) )*(t)+(-((5/2)*(p11)))-(5/2))/((((((p11+1) )*(d2))*(d1))*(t))-((d2)*(d1))),(((((((-(p22))-(1)) )*(p12))*((p11)**(2))+((-((p12)**(3))+(((-((2)*(p22)))-(2)) )*(p12)) )*(p11)+-((p12)**(3))+(((-(p22))-(1)) )*(p12)) )*((t)**(3))+(((p12)*((p11)**(2))+((((5/2)*(p22)+9/2) )*(p12))*(p11)+(((5/2)*(p22)+7/2) )*(p12)) )*((t)**(2))+((-(((5/2)*(p12))*(p11))+(((-((3/2)*(p22)))-(4)) )*(p12)) )*(t)+(3/2)*(p12))/(((((p11)**(2)+(2)*(p11)+1) )*(d2))*((t)**(2))+((((-((2)*(p11)))-(2)) )*(d2))*(t)+d2),(((((2)*((p22)**(2))+(4)*(p22)+2) )*((p12)**(2)))*((t)**(3))+((((-((4)*(p22)))-(4)) )*((p12)**(2)))*((t)**(2))+((2)*((p12)**(2)))*(t))/((((((p11+1) )*(d2))*(d1))*(t))-((d2)*(d1))),(((((((-(p22))-(1)) )*((p12)**(2)))*((p11)**(2))+((-((p12)**(4))+(((-((2)*(p22)))-(2)) )*((p12)**(2))) )*(p11)+-((p12)**(4))+(((-(p22))-(1)) )*((p12)**(2))) )*((t)**(4))+((((p12)**(2))*((p11)**(2))+((((5)*(p22)+7) )*((p12)**(2)))*(p11)+(((5)*(p22)+6) )*((p12)**(2))) )*((t)**(3))+((((((p22+1) )*((p11)**(2))+(((2)*(p22)+2) )*(p11)+p22+1) )*(d2)+-(((5)*((p12)**(2)))*(p11))+(((-((4)*(p22)))-(9)) )*((p12)**(2))) )*((t)**(2))+(((((((-((2)*(p22)))-(2)) )*(p11)+(-((2)*(p22)))-(2)) )*(d2)+(4)*((p12)**(2))) )*(t)+((p22+1) )*(d2))/(((((p11)**(2)+(2)*(p11)+1) )*(d2))*((t)**(2))+((((-((2)*(p11)))-(2)) )*(d2))*(t)+d2)],[0,(((((((-((2)*(p22)))-(2)) )*(p12))*((p11)**(2))+(((2)*((p12)**(3))+(((-((4)*(p22)))-(4)) )*(p12)) )*(p11)+(2)*((p12)**(3))+(((-((2)*(p22)))-(2)) )*(p12)) )*((t)**(3))+((((((4)*(p22)+4) )*(p12))*(p11)+(((4)*(p22)+4) )*(p12)) )*((t)**(2))+((((-((2)*(p22)))-(2)) )*(p12))*(t))/((d2)*(d1)),((((((-((3)*(p22)))-(3)) )*(p11)+(-((3)*(p22)))-(3)) )*(t)+(3/2)*(p11)+(3/2)*(p22)+3)/(d2),((((((((-((2)*((p22)**(2))))-((4)*(p22)))-(2)) )*(p12))*(p11)+(((2)*(p22)+2) )*((p12)**(3))+((((-((2)*((p22)**(2))))-((4)*(p22)))-(2)) )*(p12)) )*((t)**(3))+((((((4)*(p22)+4) )*(p12))*(p11)+(((4)*(p22)+4) )*(p12)) )*((t)**(2))+(((-(((2)*(p12))*(p11)))-((2)*(p12))) )*(t))/((d2)*(d1)),(((((((-((8)*(p22)))-(8)) )*(p12))*(p11)+(((-((8)*(p22)))-(8)) )*(p12)) )*((t)**(2))+((((4)*(p12))*(p11)+(((4)*(p22)+8) )*(p12)) )*(t)+((4)*(p12))*(d2))/(d2)],[((-((1/2)*(p22)))-(1/2))/((((p22)**(2)+(2)*(p22)+1) )*((t)**(2))+(((-((2)*(p22)))-(2)) )*(t)+1),(((((2)*((p12)**(2)))*((p11)**(2))+((4)*((p12)**(2)))*(p11)+(2)*((p12)**(2))) )*((t)**(3))+(((-(((4)*((p12)**(2)))*(p11)))-((4)*((p12)**(2)))) )*((t)**(2))+((2)*((p12)**(2)))*(t))/((((((p22+1) )*(d2))*(d1))*(t))-((d2)*(d1))),((((((((-((p22)**(2)))-((2)*(p22)))-(1)) )*(p12))*(p11)+(((-(p22))-(1)) )*((p12)**(3))+((((-((p22)**(2)))-((2)*(p22)))-(1)) )*(p12)) )*((t)**(3))+((((((5/2)*(p22)+5/2) )*(p12))*(p11)+(((p22)**(2)+(9/2)*(p22)+7/2) )*(p12)) )*((t)**(2))+((-(((3/2)*(p12))*(p11))+(((-((5/2)*(p22)))-(4)) )*(p12)) )*(t)+(3/2)*(p12))/(((((p22)**(2)+(2)*(p22)+1) )*(d2))*((t)**(2))+((((-((2)*(p22)))-(2)) )*(d2))*(t)+d2),((((((((-((5/2)*((p22)**(3))))-((15/2)*((p22)**(2))))-((15/2)*(p22)))-(5/2)) )*((p11)**(2))+(((((-((5)*((p22)**(3))))-((15)*((p22)**(2))))-((15)*(p22)))-(5)) )*(p11)+(((5/2)*(p22)+5/2) )*((p12)**(4))+(((-((5/2)*((p22)**(3))))-((15/2)*((p22)**(2))))-((15/2)*(p22)))-(5/2)) )*((t)**(4))+(((((5)*((p22)**(2))+(10)*(p22)+5) )*((p11)**(2))+(((5)*((p22)**(3))+(25)*((p22)**(2))+(35)*(p22)+15) )*(p11)+-((2)*((p12)**(4)))+(5)*((p22)**(3))+(20)*((p22)**(2))+(25)*(p22)+10) )*((t)**(3))+(((((-((5/2)*(p22)))-(5/2)) )*((p11)**(2))+((((-((10)*((p22)**(2))))-((25)*(p22)))-(15)) )*(p11)+(((-((5/2)*((p22)**(3))))-((35/2)*((p22)**(2))))-((30)*(p22)))-(15)) )*((t)**(2))+(((((5)*(p22)+5) )*(p11)+(5)*((p22)**(2))+(15)*(p22)+10) )*(t)+(-((5/2)*(p22)))-(5/2))/((((((p22+1) )*(d2))*(d1))*(t))-((d2)*(d1))),((((((((-((p22)**(2)))-((2)*(p22)))-(1)) )*((p12)**(2)))*(p11)+(((-(p22))-(1)) )*((p12)**(4))+((((-((p22)**(2)))-((2)*(p22)))-(1)) )*((p12)**(2))) )*((t)**(4))+((((((5)*(p22)+5) )*((p12)**(2)))*(p11)+(((p22)**(2)+(7)*(p22)+6) )*((p12)**(2))) )*((t)**(3))+(((((((p22)**(2)+(2)*(p22)+1) )*(p11)+(p22)**(2)+(2)*(p22)+1) )*(d2)+-(((4)*((p12)**(2)))*(p11))+(((-((5)*(p22)))-(9)) )*((p12)**(2))) )*((t)**(2))+(((((((-((2)*(p22)))-(2)) )*(p11)+(-((2)*(p22)))-(2)) )*(d2)+(4)*((p12)**(2))) )*(t)+((p11+1) )*(d2))/(((((p22)**(2)+(2)*(p22)+1) )*(d2))*((t)**(2))+((((-((2)*(p22)))-(2)) )*(d2))*(t)+d2)],[(((((((-((2)*(p22)))-(2)) )*((p12)**(2)))*(p11)+(((-((2)*(p22)))-(2)) )*((p12)**(2))) )*((t)**(3))+((((p12)**(2))*(p11)+((p22+2) )*((p12)**(2))) )*((t)**(2))+(((p12)**(2))*(d2))*(t))/((d1)**(3)),((((((((-((1/2)*((p22)**(3))))-((3/2)*((p22)**(2))))-((3/2)*(p22)))-(1/2)) )*((p11)**(4))+((((((-((3/2)*((p22)**(2))))-((3)*(p22)))-(3/2)) )*((p12)**(2))+(((-((2)*((p22)**(3))))-((6)*((p22)**(2))))-((6)*(p22)))-(2)) )*((p11)**(3))+(((((7/2)*(p22)+7/2) )*((p12)**(4))+((((-((9/2)*((p22)**(2))))-((9)*(p22)))-(9/2)) )*((p12)**(2))+(((-((3)*((p22)**(3))))-((9)*((p22)**(2))))-((9)*(p22)))-(3)) )*((p11)**(2))+((-((3/2)*((p12)**(6)))+(((7)*(p22)+7) )*((p12)**(4))+((((-((9/2)*((p22)**(2))))-((9)*(p22)))-(9/2)) )*((p12)**(2))+(((-((2)*((p22)**(3))))-((6)*((p22)**(2))))-((6)*(p22)))-(2)) )*(p11)+-((3/2)*((p12)**(6)))+(((7/2)*(p22)+7/2) )*((p12)**(4))+((((-((3/2)*((p22)**(2))))-((3)*(p22)))-(3/2)) )*((p12)**(2))+(((-((1/2)*((p22)**(3))))-((3/2)*((p22)**(2))))-((3/2)*(p22)))-(1/2)) )*((t)**(6))+(((((p22)**(2)+(2)*(p22)+1) )*((p11)**(4))+(((((-(p22))-(1)) )*((p12)**(2))+(2)*((p22)**(3))+(10)*((p22)**(2))+(14)*(p22)+6) )*((p11)**(3))+((((((2)*((p22)**(2))+p22)-(1)) )*((p12)**(2))+(6)*((p22)**(3))+(24)*((p22)**(2))+(30)*(p22)+12) )*((p11)**(2))+(((((-((4)*(p22)))-(4)) )*((p12)**(4))+(((4)*((p22)**(2))+(5)*(p22)+1) )*((p12)**(2))+(6)*((p22)**(3))+(22)*((p22)**(2))+(26)*(p22)+10) )*(p11)+(((-((4)*(p22)))-(4)) )*((p12)**(4))+(((2)*((p22)**(2))+(3)*(p22)+1) )*((p12)**(2))+(2)*((p22)**(3))+(7)*((p22)**(2))+(8)*(p22)+3) )*((t)**(5))+(((((-((1/2)*(p22)))-(1/2)) )*((p11)**(4))+(((5/2)*((p12)**(2))+((-((4)*((p22)**(2))))-((10)*(p22)))-(6)) )*((p11)**(3))+(((((8)*(p22)+31/2) )*((p12)**(2))+(((-((3)*((p22)**(3))))-((21)*((p22)**(2))))-((36)*(p22)))-(18)) )*((p11)**(2))+((-((3)*((p12)**(4)))+(((1/2)*((p22)**(2))+(17)*(p22)+24) )*((p12)**(2))+(((-((6)*((p22)**(3))))-((30)*((p22)**(2))))-((44)*(p22)))-(20)) )*(p11)+((((1/2)*(p22))-(5/2)) )*((p12)**(4))+(((1/2)*((p22)**(2))+(9)*(p22)+11) )*((p12)**(2))+(((-((3)*((p22)**(3))))-((13)*((p22)**(2))))-((35/2)*(p22)))-(15/2)) )*((t)**(4))+(((((2)*(p22)+2) )*((p11)**(3))+((-((10)*((p12)**(2)))+(6)*((p22)**(2))+(18)*(p22)+12) )*((p11)**(2))+(((((-((13)*(p22)))-(33)) )*((p12)**(2))+(2)*((p22)**(3))+(18)*((p22)**(2))+(36)*(p22)+20) )*(p11)+(3)*((p12)**(4))+((((-((p22)**(2)))-((15)*(p22)))-(24)) )*((p12)**(2))+(2)*((p22)**(3))+(12)*((p22)**(2))+(20)*(p22)+10) )*((t)**(3))+(((((-((3)*(p22)))-(3)) )*((p11)**(2))+(((25/2)*((p12)**(2))+((-((4)*((p22)**(2))))-((14)*(p22)))-(10)) )*(p11)+(((6)*(p22)+37/2) )*((p12)**(2))+(((-((1/2)*((p22)**(3))))-((11/2)*((p22)**(2))))-((25/2)*(p22)))-(15/2)) )*((t)**(2))+(((((2)*(p22)+2) )*(p11)+-((5)*((p12)**(2)))+(p22)**(2)+(4)*(p22)+3) )*(t)+(-((1/2)*(p22)))-(1/2))/((d2)*((d1)**(3))),(((((((3/4)*((p22)**(3))+(9/4)*((p22)**(2))+(9/4)*(p22)+3/4) )*(p12))*((p11)**(3))+(((((p22)**(2)+(2)*(p22)+1) )*((p12)**(3))+(((9/4)*((p22)**(3))+(27/4)*((p22)**(2))+(27/4)*(p22)+9/4) )*(p12)) )*((p11)**(2))+(((((-((21/4)*(p22)))-(21/4)) )*((p12)**(5))+(((2)*((p22)**(2))+(4)*(p22)+2) )*((p12)**(3))+(((9/4)*((p22)**(3))+(27/4)*((p22)**(2))+(27/4)*(p22)+9/4) )*(p12)) )*(p11)+(7/2)*((p12)**(7))+(((-((21/4)*(p22)))-(21/4)) )*((p12)**(5))+(((p22)**(2)+(2)*(p22)+1) )*((p12)**(3))+(((3/4)*((p22)**(3))+(9/4)*((p22)**(2))+(9/4)*(p22)+3/4) )*(p12)) )*((t)**(6))+(((((((-((3)*((p22)**(2))))-((6)*(p22)))-(3)) )*(p12))*((p11)**(3))+(((((11/4)*(p22)+11/4) )*((p12)**(3))+(((((-((3)*((p22)**(3))))-((18)*((p22)**(2))))-((27)*(p22)))-(12)) )*(p12)) )*((p11)**(2))+(((1/4)*((p12)**(5))+(((11/4)*((p22)**(2))+(11)*(p22)+33/4) )*((p12)**(3))+(((((-((6)*((p22)**(3))))-((27)*((p22)**(2))))-((36)*(p22)))-(15)) )*(p12)) )*(p11)+(((1/4)*(p22)+1/2) )*((p12)**(5))+(((11/4)*((p22)**(2))+(33/4)*(p22)+11/2) )*((p12)**(3))+(((((-((3)*((p22)**(3))))-((12)*((p22)**(2))))-((15)*(p22)))-(6)) )*(p12)) )*((t)**(5))+((((((15/4)*(p22)+15/4) )*(p12))*((p11)**(3))+((-((15/4)*((p12)**(3)))+(((45/4)*((p22)**(2))+(135/4)*(p22)+45/2) )*(p12)) )*((p11)**(2))+(((((-((15)*(p22)))-(45/2)) )*((p12)**(3))+(((15/4)*((p22)**(3))+(135/4)*((p22)**(2))+(135/2)*(p22)+75/2) )*(p12)) )*(p11)+(19/4)*((p12)**(5))+((((-((15/4)*((p22)**(2))))-((45/2)*(p22)))-(45/2)) )*((p12)**(3))+(((15/4)*((p22)**(3))+(45/2)*((p22)**(2))+(75/2)*(p22)+75/4) )*(p12)) )*((t)**(4))+((-(((3/2)*(p12))*((p11)**(3)))+((((-((27/2)*(p22)))-(18)) )*(p12))*((p11)**(2))+(((49/4)*((p12)**(3))+((((-((27/2)*((p22)**(2))))-((54)*(p22)))-(45)) )*(p12)) )*(p11)+(((49/4)*(p22)+49/2) )*((p12)**(3))+(((((-((3/2)*((p22)**(3))))-((18)*((p22)**(2))))-((45)*(p22)))-(30)) )*(p12)) )*((t)**(3))+((((21/4)*(p12))*((p11)**(2))+((((63/4)*(p22)+105/4) )*(p12))*(p11)+-((17/2)*((p12)**(3)))+(((21/4)*((p22)**(2))+(105/4)*(p22)+105/4) )*(p12)) )*((t)**(2))+((-(((6)*(p12))*(p11))+(((-((6)*(p22)))-(12)) )*(p12)) )*(t)+(9/4)*(p12))/((d2)*((d1)**(3))),(((((((((-((1/2)*((p22)**(4))))-((2)*((p22)**(3))))-((3)*((p22)**(2))))-((2)*(p22)))-(1/2)) )*((p11)**(3))+(((((((-((3/2)*((p22)**(3))))-((9/2)*((p22)**(2))))-((9/2)*(p22)))-(3/2)) )*((p12)**(2))+((((-((3/2)*((p22)**(4))))-((6)*((p22)**(3))))-((9)*((p22)**(2))))-((6)*(p22)))-(3/2)) )*((p11)**(2))+(((((7/2)*((p22)**(2))+(7)*(p22)+7/2) )*((p12)**(4))+(((((-((3)*((p22)**(3))))-((9)*((p22)**(2))))-((9)*(p22)))-(3)) )*((p12)**(2))+((((-((3/2)*((p22)**(4))))-((6)*((p22)**(3))))-((9)*((p22)**(2))))-((6)*(p22)))-(3/2)) )*(p11)+(((-((3/2)*(p22)))-(3/2)) )*((p12)**(6))+(((7/2)*((p22)**(2))+(7)*(p22)+7/2) )*((p12)**(4))+(((((-((3/2)*((p22)**(3))))-((9/2)*((p22)**(2))))-((9/2)*(p22)))-(3/2)) )*((p12)**(2))+((((-((1/2)*((p22)**(4))))-((2)*((p22)**(3))))-((3)*((p22)**(2))))-((2)*(p22)))-(1/2)) )*((t)**(6))+(((((2)*((p22)**(3))+(6)*((p22)**(2))+(6)*(p22)+2) )*((p11)**(3))+(((((2)*((p22)**(2))+(4)*(p22)+2) )*((p12)**(2))+(p22)**(4)+(10)*((p22)**(3))+(24)*((p22)**(2))+(22)*(p22)+7) )*((p11)**(2))+(((((-((4)*(p22)))-(4)) )*((p12)**(4))+((-((p22)**(3))+(p22)**(2)+(5)*(p22)+3) )*((p12)**(2))+(2)*((p22)**(4))+(14)*((p22)**(3))+(30)*((p22)**(2))+(26)*(p22)+8) )*(p11)+(((-((4)*(p22)))-(4)) )*((p12)**(4))+(((-((p22)**(3)))-((p22)**(2))+p22+1) )*((p12)**(2))+(p22)**(4)+(6)*((p22)**(3))+(12)*((p22)**(2))+(10)*(p22)+3) )*((t)**(5))+((((((-((3)*((p22)**(2))))-((6)*(p22)))-(3)) )*((p11)**(3))+(((((1/2)*(p22)+1/2) )*((p12)**(2))+(((-((4)*((p22)**(3))))-((21)*((p22)**(2))))-((30)*(p22)))-(13)) )*((p11)**(2))+(((1/2)*((p12)**(4))+(((8)*((p22)**(2))+(17)*(p22)+9) )*((p12)**(2))+((((-((1/2)*((p22)**(4))))-((10)*((p22)**(3))))-((36)*((p22)**(2))))-((44)*(p22)))-(35/2)) )*(p11)+(((-((3)*(p22)))-(5/2)) )*((p12)**(4))+(((5/2)*((p22)**(3))+(31/2)*((p22)**(2))+(24)*(p22)+11) )*((p12)**(2))+((((-((1/2)*((p22)**(4))))-((6)*((p22)**(3))))-((18)*((p22)**(2))))-((20)*(p22)))-(15/2)) )*((t)**(4))+(((((2)*(p22)+2) )*((p11)**(3))+((-((p12)**(2))+(6)*((p22)**(2))+(18)*(p22)+12) )*((p11)**(2))+(((((-((13)*(p22)))-(15)) )*((p12)**(2))+(2)*((p22)**(3))+(18)*((p22)**(2))+(36)*(p22)+20) )*(p11)+(3)*((p12)**(4))+((((-((10)*((p22)**(2))))-((33)*(p22)))-(24)) )*((p12)**(2))+(2)*((p22)**(3))+(12)*((p22)**(2))+(20)*(p22)+10) )*((t)**(3))+((-((1/2)*((p11)**(3)))+(((-((4)*(p22)))-(11/2)) )*((p11)**(2))+(((6)*((p12)**(2))+((-((3)*((p22)**(2))))-((14)*(p22)))-(25/2)) )*(p11)+(((25/2)*(p22)+37/2) )*((p12)**(2))+((-((3)*((p22)**(2))))-((10)*(p22)))-(15/2)) )*((t)**(2))+(((p11)**(2)+(((2)*(p22)+4) )*(p11)+-((5)*((p12)**(2)))+(2)*(p22)+3) )*(t)+(-((1/2)*(p11)))-(1/2))/((d2)*((d1)**(3))),(((((((-((5)*((p22)**(2))))-((10)*(p22)))-(5)) )*((p11)**(2))+(((((-((3)*(p22)))-(3)) )*((p12)**(2))+((-((10)*((p22)**(2))))-((20)*(p22)))-(10)) )*(p11)+(8)*((p12)**(4))+(((-((3)*(p22)))-(3)) )*((p12)**(2))+((-((5)*((p22)**(2))))-((10)*(p22)))-(5)) )*((t)**(3))+(((((15/2)*(p22)+15/2) )*((p11)**(2))+((-((13/2)*((p12)**(2)))+(15/2)*((p22)**(2))+(30)*(p22)+45/2) )*(p11)+(((-((13/2)*(p22)))-(13)) )*((p12)**(2))+(15/2)*((p22)**(2))+(45/2)*(p22)+15) )*((t)**(2))+((-((5/2)*((p11)**(2)))+(((-((10)*(p22)))-(15)) )*(p11)+(16)*((p12)**(2))+((-((5/2)*((p22)**(2))))-((15)*(p22)))-(15)) )*(t)+(5/2)*(p11)+(5/2)*(p22)+5)/((d2)*(d1))]])
  return (p@z)

""" 
# test inputs
t_span=[0.0,1.0]
iv=[1/4,1/4,np.pi/8,1/4,1/4]
x=[-2,-0.5,-1.5] #sample pt
#x=[-2,-0.1,-2] #sample pt
#x=[-10,-7,-5] #sample pt
#x=[-10,-6,-5] #sample pt
sol = solve_ivp(f_ReLU,t_span,iv,method='RK45',args=(x,),rtol=1e-10,atol=1e-10)
print(sol)
print(sol.y[0,-1])
print('x=',x,end=', ')
print('E[ReLU]=',sol.y[0,-1]/nc2(x))
"""ppp

def e_relu(x,rtol = 1e-10, atol = 1e-10):
  if x[0]*x[2]-x[1]**2 <= 0:
    print('Error: input x is not positive definite.')
    return -1
  t_span=[0.0,1.0]
  iv=[1/4,1/4,np.pi/8,1/4,1/4]
  sol = solve_ivp(f_ReLU,t_span,iv,method='RK45',args=(x,),rtol=rtol,atol=atol)
  return sol.y[0,-1]/nc2(x)

# Example of input. E[ReLU(u)*ReLU(v)] for x=(x11,x12,x22)
# x = -(1/2)*Sigma**(-1)
# sigma = np.array([[1,1/2],[1/2,1]])
# x = np.linalg.inv(sigma)
# x = -x/2
# e=e_relu([x[0][0],x[0][1],x[1][1]])
# print(e)


  
